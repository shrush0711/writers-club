create 3 instance : 1 manager 2 worker 
install docker in all 

-----------on manager---------
docker swarm init
copy token command and paste in both worker node-
mkdir web_app

vi app.py 
------------------------------------app.py-----------------------------------
from flask import Flask
from redis import Redis, RedisError
import os
import socket

# Connect to Redis
redis = Redis(host="redis", db=0, socket_connect_timeout=2, socket_timeout=2)

app = Flask(__name__)

@app.route("/")
def hello():
    try:
        visits = redis.incr("counter")
    except RedisError:
        visits = "<i>cannot connect to Redis, counter disabled</i>"

    html = "<h3>Hello {name}!</h3>" \
           "<b>Hostname:</b> {hostname}<br/>" \
           "<b>Visits:</b> {visits}"
    return html.format(name=os.getenv("NAME", "world"), hostname=socket.gethostname(), visits=visits)

if __name__ == "__main__":
    app.run(host='0.0.0.0', port=80)

-----------------------------------------------------------------------
esc :wq enter
-----------------------------------------------------------------------
cat app.py


vi docker-compose.yml 

--------------------------------------------------------------
change username to your username wherever necessary and in docker-compose.yml
-------------------------------------------------------------------------------------------docker-compose.yml---
version: "3"
services:
  # Service Name Defined as web
  web:
    # Pull the Image from Repository.
    # replace shrush0711/repo:tag with your name and image details
    image: shrush0711/web_app:1.0
    # Command used to deploy the Service
    deploy:
      # Run 5 instances of that image as a service called web
      replicas: 5
      resources:
        # Limiting each one to use, at most, 10% of a single core of CPU time and 50MB of RAM.
        limits:
          cpus: "0.1"
          memory: 50M
      # Immediately restart containers if one fails.     
      restart_policy:
        condition: on-failure
    # Map port 4000 on the host to webâ€™s port 80.    
    ports:
      - "4000:80"
    # Define default network  
    networks:
      - webnet
  
  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    volumes:
      - "/app/redis_data:/data"
    deploy:
      placement:
        constraints: [node.hostname == manager2]
    command: redis-server --appendonly yes
    networks:
      - webnet

networks:
  webnet:

---------------------------------------------------------------------
cat docker-compose.yml


vi dockerfile 
------------------------------------dockerfile----------------
# Use an official Python runtime as a parent image
FROM python:3.12-slim

# Set the working directory to /app
WORKDIR /app

# Copy the current directory contents into the container at /app
COPY . /app

# Install any needed packages specified in requirements.txt
RUN pip install --trusted-host pypi.python.org -r requirements.txt

# Make port 80 available to the world outside this container
EXPOSE 80

# Define environment variable
ENV NAME World

# Run app.py when the container launches
CMD ["python", "app.py"]
-----------------------------------------------------------------
cat dockerfile

vi requirements.txt
---------------------------------------requirements.txt------------------
Flask
Redis
-------------------------------------------------------
cat requirements.txt

ls
docker build -t web_app .
docker tag web_app:latest shrush0711/web_app:1.0

docker login 
enter id/password of dockerhub
docker push shrush0711/web_app:1.0
docker stack deploy -c docker-compose.yml web_app
docker node ls
docker container ls 
copy public ip:4000 (Manager and worker both ip)
check dockerhub for latest image in repositories
